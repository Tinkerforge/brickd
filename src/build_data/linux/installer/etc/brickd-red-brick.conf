# Brick Daemon Configuration
#
# Run 'brickd --check-config' to check config for errors.

# Network Connectivity
#
# Brick Daemon supports the Tinkerforge Protocol over plain TCP/IP connections,
# over WebSocket connections and over special Mesh Gateway connections for the
# WIFI Extension 2.0 Mesh. Hence, it uses three different server sockets.
#
# The address can either be a dotted-decimal IPv4 address or a hexadecimal
# IPv6 address. It can also be a hostname such as localhost. If an IPv6 address
# is given or the hostname gets resolved to an IPv6 address then the dual_stack
# option controls if dual-stack mode gets enabled (on) or disabled (off) for
# the sockets bound to that address.
#
# By default WebSocket support is disabled, by setting the port to 0. To enable
# WebSocket support set the WebSocket port to a value different from 0, the
# recommended port is 4280. WebSocket support is disabled by default due to
# security reasons. If WebSocket support is enabled then any website you open
# in your browser can freely connect to your local Brick Daemon and control the
# Bricks and Bricklets connected to it. We strongly recommend that you enable
# authentication if you enabled WebSocket support.
#
# The default values are 127.0.0.1, 4223, 0 (disabled), 4240 and off.
listen.address = 127.0.0.1
listen.plain_port = 4223
listen.websocket_port = 0
listen.mesh_gateway_port = 4240
listen.dual_stack = off

# Network Authentication
#
# The Tinkerforge Protocol supports authentication on a per-connection basis.
# By default authentication is disabled for backward compatibility. If it is
# enabled then an IP Connection has to prove to the Brick Daemon that it knows
# the authentication secret via a handshake mechanism, before it can do any
# useful communication with Bricks and Bricklets.
#
# The authentication secret is an ASCII encoded string with up to 64 characters.
# An empty secret means that authentication is disabled. If the secret is longer
# than 64 characters then Brick Daemon will complain and refuse to start.
#
# If you enable WebSocket support then we strongly recommend that you also
# enable authentication.
#
# The default value is an empty string (disabled).
authentication.secret =

# Logging
#
# Each log message has a certain severity level attached to it. The visibility
# of log messages is controlled by their severity levels. Log messages with a
# severity level above or equal to the configured level are included in the log
# output, all other log messages are excluded.
#
# Valid levels are error, warn, info and debug. The default value is info.
# It means that log messages on error, warn and info level are included, but
# messages on debug level are excluded. This can be overridden with the --debug
# command line option that sets the severity to debug.
#
# If the severity level is set to debug then the visibility of debug messages
# can be controlled by a comma separated list of filter statements (FIXME: Add
# more details about filter statements).
#
# The default values are info and an empty string (all message are included).
log.level = info
log.debug_filter =

# RED Brick LED Trigger
#
# The RED Brick has two LEDs, a green and a red one. Each LED has a trigger
# configuration that controls how the LED is turned on and off.
#
# Valid values are cpu, gpio, heartbeat, mmc, off and on. The default values
# are heartbeat for the green LED and off for the red LED.
led_trigger.green = heartbeat
led_trigger.red = off

# RED Brick Stack and Extensions
#
# On the RED Brick the Brick Daemon handles SPI stack and RS485 communication.
# Both, SPI protocol and RS485 protocol, use a master-polls-slave pattern. The
# delay between poll operations controls the trade-off between throughput and
# CPU load. A longer poll delay decreases throughput and CPU load and a shorter
# poll delay increases throughput and CPU load.
#
# The poll delay is specified in microseconds with a minimum value of 50. The
# default values are 50 for SPI and 4000 for RS485.
poll_delay.spi = 50
poll_delay.rs485 = 4000
